{"version":3,"sources":["icon.png","Header.js","Form.js","Loader.js","ShowDetails.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","src","icon","width","height","alt","IsValid","props","hasValue","valid","faCheckSquare","color","faTimesCircle","Form","state","number","onChange","e","setState","isNaN","target","value","includes","Object","keys","length","name","onSubmit","preventDefault","type","placeholder","this","pattern","onClick","disabled","React","Component","Loader","ShowDetail","details","input","words","map","el","key","Result","result","dictionary","2","3","4","5","6","7","8","9","0","printWordsUtil","numbers","curr","output","n","i","temp","charAt","String","push","substring","App","loading","x","split","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b287825d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.4302e052.png\";","import icon from \"./icon.png\";\nimport './Header.css';\nimport React from \"react\";\n\nconst Header = () => {\n    return (\n        <nav className='navbar navbar-dark'>\n            <a className='navbar-brand' href='/'>\n                <img src={icon} width='30' height='30' alt='' className={'invert'}/>\n                &nbsp;Phone Number Decoder\n            </a>\n        </nav>\n    )\n};\n\nexport default Header;","import React from \"react\";\nimport './Form.css';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheckSquare} from '@fortawesome/free-solid-svg-icons';\nimport {faTimesCircle} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction IsValid(props) {\n    if (props.hasValue) {\n        if (props.valid) {\n            return <FontAwesomeIcon icon={faCheckSquare} color='green'/>;\n        } else {\n            return <FontAwesomeIcon icon={faTimesCircle} color='red'/>;\n        }\n    } else {\n        return <div/>;\n    }\n}\n\nclass Form extends React.Component {\n    state = {\n        number: '',\n        valid: false,\n        hasValue: false\n    };\n\n    onChange = (e) => {\n        this.setState({\n            valid: !isNaN(e.target.value) && !e.target.value.includes('1'),\n            hasValue: Object.keys(e.target.value).length > 0\n        });\n        this.setState({[e.target.name]: e.target.value});\n        this.props.onChange(e.target.value);\n    };\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.onSubmit(this.state);\n        this.setState({\n            number: '',\n            valid: false,\n            hasValue: false\n        })\n    };\n\n    render() {\n        return (\n            <form className='form-inline'>\n                <div className='form-group with-icon mr-2'>\n                    <input type='text' placeholder='Phone Number' className='form-control pr-4'\n                           value={this.state.number}\n                           name='number' onChange={e => this.onChange(e)} pattern=\"[0-9]*\"/>\n                    <div className='validityIndicator'>\n                        <IsValid valid={this.state.valid} hasValue={this.state.hasValue}/>\n                    </div>\n                </div>\n                <button className='btn btn-primary' type='submit' onClick={(e) => this.onSubmit(e)}\n                        disabled={!this.state.valid}>Submit\n                </button>\n            </form>\n        )\n    }\n}\n\nexport default Form;","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSpinner} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Loader() {\n    return (\n        <div>\n            <FontAwesomeIcon icon={faSpinner}/>\n        </div>\n    )\n}\n\nexport default Loader;","import React from \"react\";\n\nconst ShowDetail = (props) => {\n    const details = props.details;\n\n    if (details.input.number) {\n        return (\n            <div>\n                <div className='mt-3'>You entered: {details.input.number}</div>\n                <ul>{details.words.map(el => <li key={el}> {el} </li>)}</ul>\n            </div>\n        );\n    } else {\n        return <div/>;\n    }\n};\n\nexport default ShowDetail;","import React from \"react\";\nimport Loader from \"./Loader\";\nimport ShowDetail from \"./ShowDetails\";\n\nconst Result = (props) => {\n    // if (props.result.loading) return <Loader />;\n    return <ShowDetail details={props.result}/>\n};\n\nexport default Result;","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Form from './Form';\nimport Result from \"./Results\";\n\nconst dictionary = {\n    2: 'ABC',\n    3: 'DEF',\n    4: 'GHI',\n    5: 'JKL',\n    6: 'MNO',\n    7: 'PRS',\n    8: 'TUV',\n    9: 'WXY',\n    0: 'Z'\n};\n\nfunction printWordsUtil(numbers, curr, output, n, words) {\n    if (curr === n) {\n        return output;\n    }\n\n    // Try all 3 possible characters for current digits in number[] and recur for remaining digits\n    for (let i = 0; i < dictionary[numbers[curr]].length; i++) {\n        output += dictionary[numbers[curr]].charAt(i);\n        let temp = printWordsUtil(numbers, curr + 1, output, n, words);\n        if (typeof temp === 'string' || temp instanceof String) {\n            words.push(temp);\n        }\n        output = output.substring(0, output.length - 1);\n    }\n    return words;\n}\n\nclass App extends React.Component {\n    state = {\n        input: {},\n        valid: false,\n        hasValue: false,\n        words: [],\n        loading: true\n    };\n\n    onChange = (input) => {\n        this.setState({valid: !isNaN(input), hasValue: Object.keys(input).length});\n    };\n\n    onSubmit = (x) => {\n        this.setState({input: x, hasValue: x.hasValue, words: []});\n        let input = x.number.split('');\n        const n = input.length;\n        this.setState({words: printWordsUtil(input, 0, [], n, [])});\n    };\n\n    render() {\n        return (\n            <div>\n                <Header/>\n                <div className='container'>\n                    <div className='row'>\n                        <div className='col=9'>\n                            <Form onSubmit={input => this.onSubmit(input)} onChange={input => this.onChange(input)}/>\n                            <i>NOTE: 1 is not a valid number</i>\n                            <Result result={this.state}/>\n                        </div>\n                        <div className='col-3'>\n                            <h3>KEY: </h3>\n                            <ul>{Object.keys(dictionary).map(el => <li key={el}>{el}: {dictionary[el]}</li>)}</ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}